{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","percentage","changePercentage","bind","assertThisInitialized","window","addEventListener","throttle","removeEventListener","event","console","log","setState","getScrollPercentage","height","getDocumentHeight","innerHeight","scrollPosition","scrollY","getPercentage","value","total","Math","ceil","body","document","html","documentElement","max","scrollHeight","offsetHeight","clientHeight","huePercentage","primaryHue","floor","secondaryHue","color1","concat","color2","_this$calculateColors","calculateColors","appStyle","backgroundImage","react_default","a","createElement","className","style","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RA2EeA,cAtEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAY,GAEdR,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALPA,mFASjBY,OAAOC,iBAAiB,SAAUC,IAASX,KAAKM,iBAAkB,qDAIlEG,OAAOG,oBAAoB,SAAUZ,KAAKM,2DAG3BO,GACfC,QAAQC,IAAIF,GACZb,KAAKgB,SAAS,CACZX,WAAYL,KAAKiB,sEAKnB,IAAIC,EAASlB,KAAKmB,oBAAsBV,OAAOW,YAC3CC,EAAiBZ,OAAOa,QAC5B,OAAOtB,KAAKuB,cAAcF,EAAgBH,yCAG9BM,EAAOC,GACnB,OAAOC,KAAKC,KAAMH,EAAQC,EAAS,iDAInC,IAAIG,EAAOC,SAASD,KAChBE,EAAOD,SAASE,gBACpB,OAAOL,KAAKM,IACVJ,EAAKK,aACLL,EAAKM,aACLJ,EAAKK,aACLL,EAAKG,aACLH,EAAKI,sDAIOE,GACd,IAAIC,EAAaX,KAAKY,MAAO,IAAMF,EAAiB,KAAO,GACvDG,EAAeb,KAAKY,MAAO,IAAMF,EAAiB,KAAO,IAC7D,MAAO,CACLI,OAAM,OAAAC,OAASJ,EAAT,eACNK,OAAM,OAAAD,OAASF,EAAT,iDAID,IAAAI,EACkB3C,KAAK4C,gBAAgB5C,KAAKI,MAAMC,YACrDwC,EAAW,CACbC,gBAAiB,0BAHZH,EACDH,OAEkD,KAHjDG,EACOD,OAE0D,KAExE,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAON,GAC1BE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAIjD,KAAKI,MAAMC,aAEjB0C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAjELE,aCQEC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAS9B,SAAS+B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c7535f66.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport throttle from 'lodash.throttle';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentage: 0\n    };\n    this.changePercentage = this.changePercentage.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', throttle(this.changePercentage, 100));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.changePercentage);\n  }\n\n  changePercentage(event) {\n    console.log(event);\n    this.setState({\n      percentage: this.getScrollPercentage()\n    });\n  }\n\n  getScrollPercentage() {\n    let height = this.getDocumentHeight() - window.innerHeight;\n    let scrollPosition = window.scrollY;\n    return this.getPercentage(scrollPosition, height);\n  }\n\n  getPercentage(value, total) {\n    return Math.ceil((value / total) * 100);\n  }\n\n  getDocumentHeight() {\n    let body = document.body;\n    let html = document.documentElement;\n    return Math.max(\n      body.scrollHeight,\n      body.offsetHeight,\n      html.clientHeight,\n      html.scrollHeight,\n      html.offsetHeight\n    );\n  }\n\n  calculateColors(huePercentage) {\n    let primaryHue = Math.floor((250 * huePercentage) / 100) + 50;\n    let secondaryHue = Math.floor((360 * huePercentage) / 100) + 100;\n    return {\n      color1: `hsl(${primaryHue}, 80%, 50%)`,\n      color2: `hsl(${secondaryHue}, 50%, 60%)`\n    };\n  }\n\n  render() {\n    let { color1, color2 } = this.calculateColors(this.state.percentage);\n    let appStyle = {\n      backgroundImage: 'linear-gradient(60deg, ' + color1 + ', ' + color2 + ')'\n    };\n    return (\n      <div className=\"App\" style={appStyle}>\n        <div className=\"App-container\">\n          <p>{this.state.percentage}</p>\n        </div>\n        <div className=\"App-height\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}